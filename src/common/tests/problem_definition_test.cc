#include "../problem_definition.h"

#include "gtest/gtest.h"

class ProblemDefinitionTest : public ::testing::Test {
 protected:
  void SetUp () {
    ProblemDefinition::DeclareParameters (prm);

    // setup parameters without default values
    prm.set ("reflective boundary names", "xmin");
    prm.set ("x, y, z max values of boundary locations", "1.0, 2.0");
    prm.set ("number of cells for x, y, z directions", "1, 3");
  }

  void DeclareParamsTest ();

  dealii::ParameterHandler prm;
};

void ProblemDefinitionTest::DeclareParamsTest () {

}

TEST_F (ProblemDefinitionTest, DeclareParams_Test) {
  EXPECT_EQ (prm.get_integer("problem dimension"), 2);
  EXPECT_EQ (prm.get("transport model"), "none");
  EXPECT_EQ (prm.get("ho linear solver name"), "cg");
  EXPECT_EQ (prm.get("ho preconditioner name"), "amg");
  EXPECT_EQ (prm.get_double("ho ssor factor"), 1.0);
  EXPECT_EQ (prm.get("nda linear solver name"), "none");
  EXPECT_EQ (prm.get("nda preconditioner name"), "none");
  EXPECT_EQ (prm.get_double("nda ssor factor"), 1.0);
  EXPECT_EQ (prm.get("angular quadrature name"), "none");
  EXPECT_EQ (prm.get_integer("angular quadrature order"), 4);
  EXPECT_EQ (prm.get_integer("number of groups"), 1);
  EXPECT_EQ (prm.get_integer("thermal group boundary"), 0);
  EXPECT_EQ (prm.get("ho spatial discretization"), "cfem");
  EXPECT_EQ (prm.get("nda spatial discretization"), "cfem");
  EXPECT_EQ (prm.get_bool("do eigenvalue calculations"), false);
  EXPECT_EQ (prm.get_bool("do nda"), false);
  EXPECT_EQ (prm.get_bool("have reflective BC"), false);
  EXPECT_EQ (prm.get("reflective boundary names"), "xmin");
  EXPECT_EQ (prm.get_integer("finite element polynomial degree"), 1);
  EXPECT_EQ (prm.get_integer("uniform refinements"), 0);
  EXPECT_EQ (prm.get("x, y, z max values of boundary locations"), "1.0, 2.0");
  EXPECT_EQ (prm.get("number of cells for x, y, z directions"), "1, 3");
  EXPECT_EQ (prm.get_integer("number of materials"), 1);
  EXPECT_EQ (prm.get_bool("do print angular quadrature info"), true);
  EXPECT_EQ (prm.get_bool("is mesh generated by deal.II"), true);
  EXPECT_EQ (prm.get("output file name base"), "solu");
  EXPECT_EQ (prm.get("mesh file name"), "mesh.msh");
}
