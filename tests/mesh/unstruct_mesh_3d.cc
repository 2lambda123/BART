#include "../../src/mesh/mesh_generator.h"
#include "../test_utilities.h"

#include <deal.II/base/types.h>
#include <deal.II/grid/grid_out.h>

template <int dim>
void SetupParameters (dealii::ParameterHandler &prm) {
  prm.declare_entry ("is mesh generated by deal.II", "true",
                     dealii::Patterns::Bool(), "");
  prm.declare_entry ("is mesh pin-resolved", "true",
                     dealii::Patterns::Bool(), "");
  prm.declare_entry ("have reflective BC", "true",
                     dealii::Patterns::Bool(), "");
  prm.declare_entry ("fuel rod radius", "0.4",
                     dealii::Patterns::Double(), "");
  prm.declare_entry ("fuel rod triangulation type", "simple",
                     dealii::Patterns::Selection("simple|composite"), "");
  prm.declare_entry ("uniform refinements", "0",
                     dealii::Patterns::Integer(), "");
  prm.declare_entry ("x, y, z max values of boundary locations", "2.0,2.0,2.0",
                     dealii::Patterns::List (dealii::Patterns::Double ()), "");
  prm.declare_entry ("number of cells for x, y, z directions", "2,2,2",
                     dealii::Patterns::List (dealii::Patterns::Integer ()), "");
  prm.declare_entry ("reflective boundary names", "xmin, ymax",
                     dealii::Patterns::List(dealii::Patterns::Anything ()), "");
  prm.enter_subsection ("material ID map");
  {
    std::string id_fname = SOURCE_DIR + std::string ("/matid.unstruct.")
        + std::to_string (dim) + std::string ("d");
    prm.declare_entry ("material id file name", id_fname,
                       dealii::Patterns::FileName(), "file name for material id map");
    std::string fuel_id_fname = SOURCE_DIR + std::string ("/fuelid.unstruct.")
        + std::to_string (dim) + std::string ("d");
    prm.declare_entry ("fuel pin material id file name", fuel_id_fname,
                       dealii::Patterns::FileName(), "file name for material id map");
  }
  prm.leave_subsection ();
}

template <int dim>
void Test (dealii::ParameterHandler &prm) {
  dealii::deallog.push (dealii::Utilities::int_to_string(dim)+"D");

  // triangulation for the grid in the scope of the test function
  dealii::parallel::distributed::Triangulation<dim> tria (MPI_COMM_WORLD);

  // make grid
  MeshGenerator<dim> meshie (prm);
  meshie.MakeGrid (tria);

  for (typename dealii::Triangulation<dim>::active_cell_iterator
       cell=tria.begin_active(); cell!=tria.end(); ++cell)
    dealii::deallog << "cell ID: " << cell->id() 
                    << ":material ID::" << static_cast<int>(cell->material_id())
                    << "::center x::" << cell->center()[0] 
                    << "::center y::" << cell->center()[1] 
                    << "::center z::" << cell->center()[2] << std::endl;

  std::ofstream out("unstruct_mesh_3d.vtk");
  dealii::GridOut grid_out;
  grid_out.write_vtk (tria, out);
}

int main (int argc, char *argv[]) {
  // initialize MPI and log and declare ParameterHandler object
  dealii::Utilities::MPI::MPI_InitFinalize mpi_initialization (argc, argv, 1);
  testing::MPILogInit init;
  dealii::ParameterHandler prm;

  // parameter processing
  SetupParameters<3> (prm);

  // testing 3D
  Test<3> (prm);

  return 0;
}
