#include "../../src/common/problem_definition.h"
#include "../test_utilities.h"

void SetupParameters (dealii::ParameterHandler &prm) {
  // set entry values for those without default input
  prm.set ("reflective boundary names", "xmin");
  prm.set ("x, y, z max values of boundary locations", "1.0, 2.0");
  prm.set ("number of cells for x, y, z directions", "1, 3");
}

void FindErrors (dealii::ParameterHandler &prm) {
  // dealii::ExcInternalError() is used to indicate expected
  // condition is not satisfied.
  AssertThrow (prm.get_integer("problem dimension")==2,
               dealii::ExcInternalError());
  AssertThrow (prm.get("transport model")=="none", dealii::ExcInternalError());
  AssertThrow (prm.get("ho linear solver name")=="cg",
               dealii::ExcInternalError());
  AssertThrow (prm.get("ho preconditioner name")=="amg",
               dealii::ExcInternalError());
  AssertThrow (prm.get_double("ho ssor factor")==1.0,
               dealii::ExcInternalError());
  AssertThrow (prm.get("nda linear solver name")=="none",
               dealii::ExcInternalError());
  AssertThrow (prm.get("nda preconditioner name")=="none",
               dealii::ExcInternalError());
  AssertThrow (prm.get_double("nda ssor factor")==1.0,
               dealii::ExcInternalError());
  AssertThrow (prm.get("angular quadrature name")=="none",
               dealii::ExcInternalError());
  AssertThrow (prm.get_integer("angular quadrature order")==4,
               dealii::ExcInternalError());
  AssertThrow (prm.get_integer("number of groups")==1,
               dealii::ExcInternalError());
  AssertThrow (prm.get_integer("thermal group boundary")==0,
               dealii::ExcInternalError());
  AssertThrow (prm.get("ho spatial discretization")=="cfem",
               dealii::ExcInternalError());
  AssertThrow (prm.get("nda spatial discretization")=="cfem",
               dealii::ExcInternalError());
  AssertThrow (prm.get_bool("do eigenvalue calculations")==false,
               dealii::ExcInternalError());
  AssertThrow (prm.get_bool("do nda")==false, dealii::ExcInternalError());
  AssertThrow (prm.get_bool("have reflective BC")==false,
               dealii::ExcInternalError());
  AssertThrow (prm.get("reflective boundary names")=="xmin",
               dealii::ExcInternalError());
  AssertThrow (prm.get_integer("finite element polynomial degree")==1,
               dealii::ExcInternalError());
  AssertThrow (prm.get_integer("uniform refinements")==0,
               dealii::ExcInternalError());
  AssertThrow (prm.get("x, y, z max values of boundary locations")=="1.0, 2.0",
               dealii::ExcInternalError());
  AssertThrow (prm.get("number of cells for x, y, z directions")=="1, 3",
               dealii::ExcInternalError());
  AssertThrow (prm.get_integer("number of materials")==1,
               dealii::ExcInternalError());
  AssertThrow (prm.get_bool("do print angular quadrature info")==true,
               dealii::ExcInternalError());
  AssertThrow (prm.get_bool("is mesh generated by deal.II")==true,
               dealii::ExcInternalError());
  AssertThrow (prm.get("output file name base")=="solu",
               dealii::ExcInternalError());
  AssertThrow (prm.get("mesh file name")=="mesh.msh",
               dealii::ExcInternalError());
}

void Test (dealii::ParameterHandler &prm) {
  // purpose of this test is to see whether parameters
  // are parsed correctly
  ProblemDefinition::DeclareParameters (prm);
  SetupParameters (prm);
  FindErrors (prm);
  dealii::deallog << "OK" << std::endl;
}

int main () {
  dealii::ParameterHandler prm;

  testing::InitLog ();

  Test (prm);
  return 0;
}
